plot(horsepower, mpg)
identify(horsepower, mpg, name)
d <-  as.dist(matrix(c(0, 0.3, 0.4, 0.7,
0.3, 0, 0.5, 0.8,
0.4, 0.5, 0.0, 0.45,
0.7, 0.8, 0.45, 0.0), nrow=4))
hc1 <- hclust(d, method="complete")
plot(hc1)
?hclust
plot(hclust(d, method="complete"))
?hclust
d <-  as.dist(matrix(c(0, 0.3, 0.4, 0.7,
0.3, 0, 0.5, 0.8,
0.4, 0.5, 0.0, 0.45,
0.7, 0.8, 0.45, 0.0), nrow=4))
hc1 <- hclust(d, method="complete")
plot(hc1)
?data.frame
?as.data.frame
cutree(hc1, 2)
cutree(hc1, 4)
d <- as.data.frame(matrix(c(1, 1, 4)))
d <- as.data.frame(matrix(c(1, 1, 4)))
d <- as.data.frame(matrix(c(1, 1, 4, 2, 1, 3, 3, 0, 4, 4, 5, 1, 5, 6, 2, 6, 4, 0, nrow=6)))
View(d)
d <- as.data.frame(matrix(c(1, 1, 4, 2, 1, 3, 3, 0, 4, 4, 5, 1, 5, 6, 2, 6, 4, 0), nrow=6)))
d <- as.data.frame(matrix(c(1, 1, 4, 2, 1, 3, 3, 0, 4, 4, 5, 1, 5, 6, 2, 6, 4, 0), nrow=6))
View(d)
d <- as.data.frame(matrix(c(1,4, 1, 3, 0, 4, 5, 1, 6, 2, 4, 0), nrow=6))
View(d)
d <- as.data.frame(matrix(c(1, 1, 0, 5, 6, 4, 4, 3, 4, 1, 2, 0), nrow=6))
View(d)
d <- as.data.frame(matrix(c(1, 1, 0, 5, 6, 4, 4, 3, 4, 1, 2, 0), nrow=6, column.names=x1,x2))
?column.names
colnames(d) <- c("X1","X2")
View(d)
plot(d$X1, d$X2, xlab="X1", ylab="X2")
View(d)
View(d)
?sample
?kmeans
k1 <- sample(d, 3, replace =FALSE)
?sample
k1 <- sample (d)
k1 <- sample (d, 3, replace = FALSE)
View(USArrests)
dd <- as.dist(1-cor(USArrests))
?dist
ed <- dist(USArrests, method = "euclidean")
plot(dd,ed)
cd <- as.dist(1-cor(USArrests))
ed <-(dist(USArrests, method = "euclidean"))^2
ed <-(dist(USArrests)
ed <-dist(USArrests)
cs <- (1-cor(USArrests))
plot(cs,ed)
plot(1-cor(USArrests), (dist(USArrests)^2))
k1 <- sample(d, 3, replace = FALSE)
k1 <- sample(d, 3)
plot(as.dist(1-cor(USArrests)), (dist(USArrests)^2))
dist(USArrests)
ed <- dist(USArrests)
hc.complete =hclust(USArrests, method="complete ")
hc.complete =hclust(dist(USArrests), method="complete ")
hc.complete =hclust(dist(USArrests), method="complete")
plot(hc.complete)
plot(hc.complete, cex=90)
plot(hc.complete)
b <- cutree(hc.complete, 3)
plot(b)
plot(hc.complete)
b <- cutree(hc.complete, h=90)
plot(b)
plot(cut(hcd, h = 90)$lower)
plot(cut(hc.complete, h = 90)$lower)
cut(hc.complete, h = 90)$lower)
cut(hc.complete, h = 90)$lower
cut(hc.complete, h = 90)
?cut
Cut the dendrogram at a height that results in three distinct clusters. Which states belong to which clusters?
hc.complete =hclust(dist(USArrests), method="complete")
plot(hc.complete)
plot(cut(hc.complete, h = 90))
cutree(hc.complete, h=90)
plot(cutree(hc.complete, h=90))
cutree(hc.complete, h=80)
cutree(hc.complete, h=70)
cutree(hc.complete, k=3)
?scale
USArrestsStandardized <- scale(USArrests)
apply(USArrestsStandardized, 2, mean)
apply(USArrestsStandardized, 2, sd)
if (!require(devtools)) install.packages("devtools", dependencies=TRUE)
devtools::install_github("kbenoit/quanteda")
devtools::install_github("quantedaData", username="kbenoit")
install.packages("quanteda")
example(corpus)
set.seed(2)
x <-  matrix(rnorm(20*3*50, mean=0, sd=0.001), ncol=50)
x[1:20, 2] <-  1
x[21:40, 1] <-  2
x[21:40, 2] <-  2
x[41:60, 1] <-  1
prcomp(x)
summary(prcomp(x))
pca.out$x[,1:2]
pca.out <-prcomp(x)
pca.out$x[,1:2]
plot(pca.out$x[,1:2], col=2:4)
km.out <- kmeans(x,3)
plot(pca.out$x[,1:2], col=2:4, pch=19)
km.out$cluster
View(x)
table(km.out$cluster,x)
table(km.out,x)
table(km.out$cluster,c(rep(1,20), rep(2,20), rep(3,20))
table(km.out$cluster,c(rep(1,20), rep(2,20), rep(3,20)))
km.out <- kmeans(x,3, nstart=20)
table(km.out$cluster,c(rep(1,20), rep(2,20), rep(3,20)))
km.out <- kmeans(x,4, nstart=20)
table(km.out$cluster,c(rep(1,20), rep(2,20), rep(3,20)))
km.out$x[,1:2]
km.out2 <- kmeans(x[,1:2],3,nstart=20)
table(km.out2$cluster,c(rep(1,20), rep(2,20), rep(3,20)))
scale(x)
km.out3 <- kmeans(scale(x), 3, nstart=20)
table(km.out3$cluster,c(rep(1,20), rep(2,20), rep(3,20)))
View(x)
x.scale <- scale(x)
sd(x.scale)
sd(x.scale$V1)
sd(x)
library(ISLR)
install.packages(ISLR)
library(ISLR)
install.packages(ISLR)
library(ISLR)
library(ISLR)
library(tree)
install.packages("ISLR")
library(ISLR)
library(tree)
install.packages("tree")
library(tree)
attach(Carseats)
View(Carseats)
str(Carseats)
summary(Carseats$Sales)
Carseats$high <- ifelse(Sales <= "8", "No", "Yes")
training <- subset(Carseat, high = "No")
training <- subset(Carseats, high = "No")
test <- subset(Carseats, high = "Yes")
training <- sample(Carseats, 300, replace = FALSE)
set.seed = 1
training <- subset(Carseats, 200)
training <- subset(1:nrow(Carseats), 200)
training <- sample(1:nrow(Carseats), 200)
test <- Carseats[-training]
test <- Carseats[-training,]
tree.carseats <- tree(High~.-Sales, Carseats, subset = training)
tree.carseats <- tree(high~.-Sales, Carseats, subset = training)
View(Carseats)
Carseats <-data.frame(Carseats, hight)
Carseats <-data.frame(Carseats, high)
high <- ifelse(Sales <= "8", "No", "Yes")
Carseats <-data.frame(Carseats, high)
tree.carseats <- tree(high~.-Sales, Carseats, subset = training)
summary(tree.carseats)
View(test)
View(Carseats)
tree.carseats =tree(High∼.-Sales , Carseats )
tree.carseats =tree(high∼.-Sales , Carseats )
tree.carseats <- tree(high∼.-Sales, Carseats)
library(ISLR)
library(tree)
attach(Carseats)
High=ifelse(Sales <=8,"No","Yes ")
Carseats <- data.frame(Carseats, High)
View(Carseats)
train <- sample (Carseats, 200)
train <- sample (1:nrow(Carseats), 200)
test <- Carseats[-train,]
High.test <- High[-train,]
High.test <- High[-train]
tree.carseats <- tree(High~. -Sales, Carseats, subset = train)
pred.carseats <- predict(tree.carseats, test, type ="class")
table(pred.carseats, Carseats$High)
table(pred.carseats, High.test)
?predict
(20+23)/200
library(twitteR)
install.packages("twitteR")
library(twitteR)
setup_twitter_oauth(consumer_key = 'gUZ47gnK5YKtcUFWdFIIb1Q8R',
consumer_secret ='koZtgp4JA2xj5PiS9x8i1R1g1Vrizh9aY0lgh8OPEPHB8RXjWF',
access_token='377169806-6021hNV4phd47EAMeCN5b1l2yaiUITlHuOsIEC0D',
access_secret='NIPHmH48ulC3xbljHRBR8Ey0Y8xCIhP6AOalTpO2vPRV6')
setup_twitter_oauth(consumer_key = 'gUZ47gnK5YKtcUFWdFIIb1Q8R',
consumer_secret ='koZtgp4JA2xj5PiS9x8i1R1g1Vrizh9aY0lgh8OPEPHB8RXjWF',
access_token='377169806-6021hNV4phd47EAMeCN5b1l2yaiUITlHuOsIEC0D',
access_secret='NIPHmH48ulC3xbljHRBR8Ey0Y8xCIhP6AOalTpO2vPRV6')
world<-map_data('world')
library(RCurl)
library(maps)
library(ggplot2)
library(jsonlite)
library(twitteR)
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
world<-map_data('world')
library(streamR)
library(ROAuth)
library(ggplot2)
library(grid)
library(ROAuth)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "ZOHJIRAwnw23FhvFWyUg"
consumerSecret <- "HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY"
my_oauth <- OAuthFactory$new(consumerKey = consumerKey, consumerSecret = consumerSecret,
requestURL = requestURL, accessURL = accessURL, authURL = authURL)
library(devtools)
install_github("streamR", "pablobarbera", subdir="streamR")
install.packages('ggplot2')
my_oauth <- OAuthFactory$new(consumerKey = consumerKey, consumerSecret = consumerSecret,
requestURL = requestURL, accessURL = accessURL, authURL = authURL)
library(MASS)
View(Boston)
?Boston
lm.fit <- lm(crim~., data = Boston)
lm.fit <- lm(crim~ zn, data = Boston)
lm.fit <- lm(crim~., data = Boston)
zn <- lm(crim~ zn, data = Boston)
summary(zn)
indus <- lm(crim~ indus, data = Boston)
summary(indus)
indus <- lm(crim~ c(indus, chas), data = Boston)
attach(Boston)
attach(Boston)
boston <- c(zn, indus, chas, nox, rm, age, dis, rad, tax, ptratio, black, lstat, medv)
lm.fit <- lm(crim~., data = Boston)
summary(lm.fit)
lm.zn <- lm(crim~ zn, data = Boston)
summary(lm.zn)
lm.indus <- lm(crim~ indus, data = Boston)
summary(lm.indus)
lm.chas <- lm(crim~ chas, data = Boston)
summary(lm.chas)
?coef
lm.fit2 <- lm(crim~ c(chas, indus), data = Boston)
?lm
?gl
?paste
coef(lm.fit)
coef(c(lm.zn, lm.indus))
coef(c(lm.zn, lm.indus, lm.chas))
?coef
?Boston
attach(Boston)
var <- c(zn, indus, chas, nox, rm, age, dis, rad, tax, ptratio, black, lstat, medv)
lm.fit3 <- lm(crim~ var, data = Boston)
lm.func <- function () {}
lm.func <- function (x) {lm.x <- lm(crim~ indus, data = Boston)
> summary(lm.indus)}
lm.func <- function (x) {
lm.x <- lm(crim~ x, data = Boston)
summary(lm.x)
return(result)}
lm.fuc (Boston)
lm.func(Boston)
bos.var <- c(zn, indus, chas, nox, rm, age, dis, rad, tax, ptratio, black, lstat, medv)
bos.var <- c(Boston$zn, Boston$indus, Boston$chas, Boston$nox, Boston$rm, Boston$age, Boston$dis, Boston$rad, Boston$tax, Boston$ptratio, Boston$black, Boston$lstat, Boston$medv)
lm.fuc(bos.var)
lm.func(bos.var)
lm.func <- function (x) {
+                         lm.x <- lm(crim~ x, data = Boston)
+                         summary(lm.x)}
lm.func(bos.var)
plot(coef(lm.fit))
View(Boston)
summary(Boston$crim)
danger <- iflse (crim >= 0.25560, yes, no)
danger <- ifelse (crim >= 0.25560, yes, no)
danger <- ifelse (crim >= 0.25560, "yes", "no")
Boston <- data.frame(Boston, danger)
View(Boston)
set.seed = 3
?set.seed
set.seed(3)
train <- sample(Boston, 253)
train <-  sample(length(Boston), length(Boston)/2)
test <-  -train
Boston.train <-  College[train, ]
Boston.train <-  Boston[train, ]
Boston.test <-  Boston[test, ]
glm.fit <-glm(danger~. data =Boston, subset = train, family = binomial)
glm.fit <- glm(danger~., data =Boston, subset = train, family = binomial)
glm.prd <- predict(glm.fit, newdata = Boston.test, type = "response")
glm.prd <- predict(glm.fit, Boston.test, type = "response")
danger <- ifelse (crim >= 0.25560, "yes", "no")
Boston <- data.frame(Boston, danger)
train <- sample(Boston, 253)
train <- sample(length(Boston), 253)
?sample
attach(Boston)
train <- sample (length(Boston$danger),253)
test <- -train
Boston.train <-[train,]
Boston.train <- Boston[train,]
Boston.train <- Boston[test,]
Boston.train <- Boston[train,]
Boston.test <- Boston[test,]
glm.fit <-glm(danger~. data =Boston, subset = train, family = binomial)
glm.fit <- glm(danger~., data =Boston, subset = train, family = binomial)
glm.fit <- glm(danger~., data =Boston.train, family = binomial)
glm.fit <- glm(danger~., data = Boston)
glm.fit <- glm(danger~., data=Boston, subset =train, family=binomial)
Boston$danger
table(Boston$danger)
summary(glm.fit)
glm.pred <- predict(glm.fit, Boston.test, response = "type")
glm.probs <-  rep("Down", length(glm.pred))
glm.probs[glm.pred>.5] <-  "Up"
table(glm.pred, Boston.test$danger)
mean(glm.pred == Boston.test$danger)
table(glm.probs, Boston.test$danger)
mean(glm.pred == Boston.test$danger)
mean(glm.probs == Boston.test$danger)
mean(glm.probs == Boston.test$danger)
kNN <- knn(Boston.train, Boston.test, cl, k = 3, prob=TRUE)
install.packages(class)
install.packages("class")
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
kNN <- knn(Boston.train, Boston.test, cl, k = 3, prob=TRUE)
?knn
kNN <- knn(Boston.train, Boston.test, k = 3, prob=TRUE)
data(Boston, package = "MASS")`
data(Boston, package = "MASS")
glm.fit <-glm(formula = danger ~ ., family = binomial, data = Boston, subset = train)
if (!require(devtools)) install.packages("devtools", dependencies=TRUE)
devtools::install_github("kbenoit/quanteda", dependencies=TRUE, ref="dev")
devtools::install_github("kbenoit/quantedaData")
require(quantedaData)
data(ukManifestos, package="quantedaData")
ukPopCorpus <- subset(ukManifestos, (Year %in% c(1992, 2001, 2005) &
(Party %in% c("Lab", "LD", "Con", "BNP", "UKIP"))))
summary(ukPopCorpus)
posDict <- dictionary(list(core = c("elit", "consensus". "undemocratic", "referend", "corrupt", "propagand", "politici", "deceit", "deceiv", "betray", "shame", "scandal", "truth", "dishonest"),
context= c("establishm", "ruling")))
posDict <- dictionary(list(core = c("elit", "consensus", "undemocratic", "referend", "corrupt", "propagand", "politici", "deceit", "deceiv", "betray", "shame", "scandal", "truth", "dishonest"),context= c("establishm", "ruling")))
dfm1 <- dfm(ie2010Corpus, groups="party")
dfm2 <- dfm(ie2010Corpus, groups="party", dictionary=posDict)
plot(dfm1,dfm2)
posdfm2[1:10,]
dfm2[1:10,]
dfm2
dfm1
print("Hello World")
## Assigning a variable
x <- 5
value <- "answer"
## Basic "if"
if(x == 5){
print(x)
cat("The", value, "is", x)
}else{
print("Not 5")
}
print("Hello World")
## Basic while loop
y=3.14
while(y <= 6) {
y = y + .5
print(c(y, y+1, y+2))
}
z <- 1:10
(z)
cat("The", value, "is", x)
print("Not 5")
(MyVector[1])
(MyVector[3])
(MyVector[c(2,4)])
MyVector=c("rabbit!", 4, 8, "banana", 45, TRUE, 3.14)
(MyVector)
for(item in MyVector){
print(item)
}
(MyVector[1])
(MyVector[3])
(MyVector[c(2,4)])
#c vs list
(f <-c(5,7,"dog",9))
#Because concat defaults it will make all #chars
#list allows a collection of different modes
# or types
(g <-list(5,7,"dog",9))
(sapply(f,mode))
(sapply(g,mode))
load("~/Downloads/workingmodel_output_04242017.rdata")
ls()
load("~/Downloads/workingmodel_output_04242017.rdata")
getwd()
setwd("/Users/YoonKim/Documents/Penn/594-s17-project-oncology-1/data")
print(days)
print(days)
print(lookuptable.surv)
plot (days)
summary(lookuptable.lower)
print(lookuptable.lower[8, 1, 70, 2, 1, 2])
print(lookuptable.lower[1, 70, 2, 1, 2])
print(lookuptable.lower[8, 1, 70, 1, 1, 2])
summary(lookuptable.lower[1])
summary(lookuptable.lower[8, 1])
summary(lookuptable.lower[8])
summary(lookuptable.lower[8][1])
summary(lookuptable.lower[8][1][70])
summary(lookuptable.lower[8][1][70][1][1][2])
print(lookuptable.lower[8][1][70][1][1][2])
summary(lookuptable.lower[8][1][65][1][1][2])
summary(lookuptable.lower[8][1][80][1][1][2])
summary(lookuptable.lower[8][1][80][1][0][2])
print(lookuptable.lower[8][1][75][2][0][0])
print(lookuptable.lower[22][0][80][2][0][0])
print(lookuptable.surv[22][0][80][2][0][0])
print(lookuptable.surv[8][1][75][2][0][0])
print(lookuptable.surv[18][1][65][2][0][0])
summary(lookuptable.surv[18][1][65][2][0][0])
print.AsIs(lookuptable.surv[18][1][65][2][0][0])
print(lookuptable.surv[18][1][65][2][0][0])
var s = lookuptable.surv[18][1][65][2][0][0])
print(s)
lookuptable.surv[18][1][65][2][0][0])
lookuptable.surv[18][1][65][2][0][0]
print(days)
install.packages("Rserve")
library(Rserve)
Rserve(debug = FALSE, port=6311, args=NULL)
typeof(lookuptable.lower[8][1][70][1][1][2])
print(lookuptable.lower[8])
